/**
 * Problem
There exists a straight line along which cities are built.
Each city is given a number starting from 1. So if there are 10 cities, city 1 has a number 1, city 2 has a number 2,... city 10 has a number 10.
Different buses (named GBus) operate within different cities, covering all the cities along the way. The cities covered by a GBus are represented as 'first_city_number last_city_number' So, if a GBus covers cities 1 to 10 inclusive, the cities covered by it are represented as '1 10'
We are given the cities covered by all the GBuses. We need to find out how many GBuses go through a particular city.

Input
The first line contains the number of test cases (T), after which T cases follow each separated from the next with a blank line.
For each test case, 
The first line contains the number of GBuses.(N) 
Second line contains the cities covered by them in the form 
a1 b1 a2 b2 a3 b3...an bn 
where GBus1 covers cities numbered from a1 to b1, GBus2 covers cities numbered from a2 to b2, GBus3 covers cities numbered from a3 to b3, upto N GBuses. 
Next line contains the number of cities for which GBus count needs to be determined (P). 
The below P lines contain different city numbers. 

Output
For each test case, output one line containing "Case #Ti:" followed by P numbers corresponding to the number of cities each of those P GBuses goes through. 

Limits
1 <= T <= 10 
ai and bi will always be integers.
Small dataset
1 <= N <= 50 
1 <= ai <= 500, 1 <= bi <= 500 
1 <= P <= 50
Large dataset
1 <= N <= 500 
1 <= ai <= 5000, 1 <= bi <= 5000 
1 <= P <= 500

Sample
Input 
2
4
15 25 30 35 45 50 10 20
2
15
25

10
10 15 5 12 40 55 1 10 25 35 45 50 20 28 27 35 15 40 4 5
3
5
10
27

Output 
Case #1: 2 1
Case #2: 3 3 4
 * 
 */


import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;

public class Solution {
	InputStream is;
	PrintWriter out;
	String INPUT = "";

	public static class Pair
	{
		int start;
		int end;
		public Pair(int start, int end)
		{
			this.start = start;
			this.end = end;
		}
		public int getStart()
		{
			return start;
		}
		public int getEnd()
		{
			return end;
		}
	}
	
	void solve()
	{
		int testCases = ni();
		for(int i=0; i<testCases; i++)
		{
			System.out.printf("Case #%d:",(i+1));
			int n = ni();
			Pair[] pair = new Pair[n];
			// read all the pair
			for(int j=0; j<n; j++)
			{
				int start = ni();
				int end = ni();
				pair[j] = new Pair(start, end);
			}
			
			int query = ni();
			for(int j=0; j<query; j++)
			{
				int count = 0;
				int city = ni();
				for(int k=0; k<n ;k++)
				{
					Pair p = pair[k];
					if(p.getStart() <= city && city <= p.getEnd())
						count++;
				}
				System.out.print(" "+count);
			}
			System.out.println();
		}
	}

	
	
	
	void run() throws Exception
	{
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		long s = System.currentTimeMillis();
		solve();
		out.flush();
		if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
	}
	
	public static void main(String[] args) throws Exception { new Solution().run(); }
	
	private byte[] inbuf = new byte[1024];
	private int lenbuf = 0, ptrbuf = 0;
	
	private int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private double nd() { return Double.parseDouble(ns()); }
	private char nc() { return (char)skip(); }
	
	private String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}
