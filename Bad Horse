/**
 * Problem
As the leader of the Evil League of Evil, Bad Horse has a lot of problems to deal with. Most recently, there have been far too many
 arguments and far too much backstabbing in the League, so much so that Bad Horse has decided to split the league into two
  departments in order to separate troublesome members. Being the Thoroughbred of Sin, Bad Horse isn't about to spend his 
  valuable time figuring out how to split the League members by himself. That what he's got you -- his loyal henchman -- for.

Input
The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with a positive 
integer M on a line by itself -- the number of troublesome pairs of League members. The next M lines each contain a pair of 
names, separated by a single space.

Output
For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1) and y is either
 "Yes" or "No", depending on whether the League members mentioned in the input can be split into two groups with neither of
  the groups containing a troublesome pair.

Limits
1 ≤ T ≤ 100.
Each member name will consist of only letters and the underscore character.
Names are case-sensitive.
No pair will appear more than once in the same test case.
Each pair will contain two distinct League members.

Small dataset
1 ≤ M ≤ 10.
Large dataset
1 ≤ M ≤ 100.
Sample

Input 
2
1
Dead_Bowie Fake_Thomas_Jefferson
3
Dead_Bowie Fake_Thomas_Jefferson
Fake_Thomas_Jefferson Fury_Leika
Fury_Leika Dead_Bowie

Output 
Case #1: Yes
Case #2: No
 */



import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.Stack;



public class Solution {
	InputStream is;
	PrintWriter out;
	String INPUT = "";

	static class Node
	{
		String id;
		ArrayList<String> neighbor;
		int color;
		
		public Node(String id)
		{
			this.id = id;
			neighbor = new ArrayList<String>();
			color = -1;
		}
	}

	
	void solve()
	{
		int testCases = ni();
		for (int i = 0; i < testCases; i++) 
		{
			int n = ni();
			Map<String, Node> map = new HashMap<String, Node>();
			Set<String> set1 = new HashSet<String>();
			Set<String> set2 = new HashSet<String>();
			String src = null;
			for(int j = 0; j<n ; j++)
			{
				String str1 = ns();
				String str2 = ns();
				
				if(j == 0)
					src = str1;
				Node node = map.get(str1);
				if(node == null)
				{
					node = new Node(str1);
					map.put(str1,node);
				}
				node.neighbor.add(str2);
				// add vertices into the list of other node to make it undirected
				node = map.get(str2);
				if(node == null)
				{
					node = new Node(str2);
					map.put(str2,node);
				}
				node.neighbor.add(str1);
			}
			if(bipartiteGraph(map))
				System.out.printf("Case #%d: Yes\n",i+1);
			else
				System.out.printf("Case #%d: No\n",i+1);
		}
	}
	
	public boolean bipartiteGraph(Map<String, Node> map)
	{
		for(Map.Entry<String, Node> entry : map.entrySet())
		{
			Node node = entry.getValue();
			if(node.color == -1)
				node.color = 1;
			else
				continue;
			Queue<Node> queue = new LinkedList<Node>();
			queue.add(node);
			
			while(!queue.isEmpty())
			{
				node = queue.remove();
				for( String ele : node.neighbor)
				{
					Node temp = map.get(ele);
					if(temp.color == -1)
					{
						temp.color = node.color ^ 1;
						queue.add(temp);
					}
					else
						if(node.color == temp.color)
							return false;
						
				}
			}
		}
		return true;
	}
	
	void run() throws Exception
	{
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		long s = System.currentTimeMillis();
		solve();
		out.flush();
		if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
	}
	
	public static void main(String[] args) throws Exception { new Solution().run(); }
	
	private byte[] inbuf = new byte[1024];
	private int lenbuf = 0, ptrbuf = 0;
	
	private int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private double nd() { return Double.parseDouble(ns()); }
	private char nc() { return (char)skip(); }
	
	private String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}
