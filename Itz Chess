/**
 * Problem
 * Given an arranged chess board with pieces, figure out the total number of different 
   ways in which any piece can be killed in one move. 
   Note: in this problem, the pieces can be killed despite of the color.
   
   For example, if there are 3 pieces King is at B2, Pawn at A1 and Queen at H8 then the total number of pieces that an be killed is 3. H8-Q can kill B2-K, A1-P can kill B2-K, B2-K can kill A1-P

A position on the chess board is represented as A1, A2... A8,B1.. H8

Pieces are represented as

(K) King can move in 8 direction by one place.
(Q) Queen can move in 8 direction by any number of places, but can't overtake another piece.
(R) Rook can only move vertically or horitonzally, but can't overtake another piece.
(B) Bishop can only move diagonally, but can't overtake another piece.
(N) Knights can move to a square that is two squares horizontally and one square vertically OR one squares horizontally and two square vertically.
(P) Pawn can only kill by moving diagonally upwards (towards higher number i.e. A -> B, B->C and so on).
Input
The first line of the input gives the number of test cases, T. T Test cases follow. Each test case consists of the number of pieces , N. N lines follow, each line mentions where a piece is present followed by - with the piece type
Output
For each test case, output one line containing "Case #x: y", where x is the test case number (starting from 1) and y is the the total number of different ways in which any piece can be killed.

Limits
1 ≤ T ≤ 100.
Small dataset
1 ≤ N ≤ 10.
Pieces can include K, P
Large dataset
1 ≤ N ≤ 64.

Sample

INPUT
2
2
A1-K
A8-Q

3
B2-K
A1-P
H8-Q

 OUTPUT
Case #1: 1
Case #2: 3


 */


import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;

public class Solution {
	InputStream is;
	PrintWriter out;
	String INPUT = "";


	public enum Key {K, Q, R, B, N, P};
	public enum Row {A (7), B (6) , C (5), D (4), E (3), F (2), G (1), H (0); 
	 private final int rowCode;

	    Row(int rowCode) {
	        this.rowCode = rowCode;
	    }
	    
	    public int getRowCode() {
	        return this.rowCode;
	    }};

	 public int getCol(char ch)
	 {
		 int row = 0;
		 switch(ch)
		 {
		 case 'A': 
			 row = 7;
			 break;
		 case 'B': 
			 row = 6;
			 break;
		 case 'C':
			 row = 5;
			 break;
		 case 'D':
			 row = 4;
			 break;
		 case 'E':
			 row = 3;
			 break;
		 case 'F':
			 row = 2;
			 break;
		 case 'G':
			 row = 1;
			 break;
		 case 'H':
			 row = 0;
			 break;
		 }
		 return row;
	 }
	 
	 
	
	void solve()
	{
		int testCases = ni();
		for(int i=0; i<testCases; i++)
		{
			char[][] board = new char[8][8];
			for(int k=0; k<8; k++)
				Arrays.fill(board[k], 'X');
			int n = ni();
			for(int j=0; j<n; j++)
			{
				String string = ns();
				char[] ch = string.toCharArray();
				int col = getCol(ch[0]);
				int row = ch[1] - '1';
				board[row][col] = ch[3];
			}
			
			int num = countOfKill(board);
			System.out.printf("Case #%d: %d\n",(i+1),num);
			
		}
	}
	
	
	public int countOfKill(char[][] board)
	{
		int kill = 0;
		for(int row=0; row<8; row++)
		{
			for(int col=0; col<8; col++)
			{
				if(board[row][col] != 'X')
				{
					switch(board[row][col])
					{
					case 'K':
						kill += King(board, row, col);
						break;
					case 'Q':
						kill += Queen(board, row, col);
						break;
					case 'B':
						kill += Bishop(board, row, col);
						break;
					case 'N':
						kill += Knights(board, row, col);
						break;
					case 'P':
						kill += Pawn(board, row, col);
						break;
					case 'R':
						kill += Rook(board, row, col);
						break;
						
					}
				}
			}
		}
		return kill;
	}

	public int King(char board[][], int row, int col)
	{
		int kill = 0;
		int[] moveRow = {-1, -1, -1,  0, 1, 1,  1,  0};
		int[] moveCol = {-1,  0,  1,  1, 1, 0, -1, -1};
		for(int i=0; i<moveRow.length; i++)
		{
			int currRow = row + moveRow[i];
			int currCol = col + moveCol[i];
			// count whether any element is their all eight direction of King
			if(currRow >= 0 && currRow < 8 && currCol >= 0 && currCol < 8 && board[currRow][currCol]!='X')
				kill++;
		}
		return kill;
	}
	
	public int Knights(char board[][], int row, int col)
	{
		int kill = 0;
		int[] moveRow = {-2, -2, -1,  1, 2,  2,  1, -1};
		int[] moveCol = {-1,  1,  2,  2, 1, -1, -2, -2};
		for(int i=0; i<moveRow.length; i++)
		{
			int currRow = row + moveRow[i];
			int currCol = col + moveCol[i];
			// count whether any element is their all eight direction of King
			if(currRow >= 0 && currRow < 8 && currCol >= 0 && currCol < 8 && board[currRow][currCol]!='X')
				kill++;
		}
		return kill;
	}
	
	public int Pawn(char[][] board, int row, int col)
	{
		int kill = 0;
		int[] moveRow = { 1, -1};
		int[] moveCol = {-1, -1};
		for(int i=0; i<moveRow.length; i++)
		{
			int currRow = row + moveRow[i];
			int currCol = col + moveCol[i];
			// count whether any element is their at diagonal forward of PAWN
			if(currRow >= 0 && currRow < 8 && currCol >= 0 && currCol < 8 && board[currRow][currCol]!='X')
				kill++;
		}
		return kill;
	}
	
	public int Queen(char[][] board, int row, int col)
	{
		int kill = 0;
		kill += horizontalVerticalCheck(board, row, col);
		kill += diagonalCheck(board, row, col);
		return kill;
	}
	
	public int Bishop(char[][] board, int row, int col)
	{
		int kill = 0;
		kill = diagonalCheck(board, row, col);
		return kill;
	}
	
	public int Rook(char[][] board, int row, int col)
	{
		int kill = 0;
		kill = horizontalVerticalCheck(board, row, col);
		return kill;
	}
	
	
	public int horizontalVerticalCheck(char board[][], int row, int col)
	{
		int kill = 0;
		
		// vertical-UP
		int currRow = row;
		int currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currRow -=1; 
			if(currRow >= 0 && currRow < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		
		// Vertical Down
		currRow = row;
		currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currRow +=1; 
			if(currRow >= 0 && currRow < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		
		// Horizontal-Right
		currRow = row;
		currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currCol +=1;
			if(currCol >= 0 && currCol < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		
		// Horizontal Left
		currRow = row;
		currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currCol -=1;
			if(currCol >= 0 && currCol < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		return kill;
	}
	
	public int diagonalCheck(char board[][], int row, int col)
	{
		int kill = 0;
		
		// Diagonal UpLeft
		int currRow = row;
		int currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currCol -=1;
			currRow -=1; 
			if(currRow >= 0 && currRow < 8 && currCol >= 0 && currCol < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		
		// Diagonal UpRight
		currRow = row;
		currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currCol +=1;
			currRow -=1; 
			if(currRow >= 0 && currRow < 8 && currCol >= 0 && currCol < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		
		// diagonal DownRight
		currRow = row;
		currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currCol +=1;
			currRow +=1; 
			if(currRow >= 0 && currRow < 8 && currCol >= 0 && currCol < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		
		// diagonal DownLeft
		currRow = row;
		currCol = col;
		for(int i=0; i<8 ; i++)
		{
			currCol -=1;
			currRow +=1; 
			if(currRow >= 0 && currRow < 8 && currCol >= 0 && currCol < 8)
			{
				if(board[currRow][currCol]!='X')
				{
					kill++;
					break;
				}
			}
			else
				break;
		}
		return kill;
	}
	
	
	
	void run() throws Exception
	{
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		long s = System.currentTimeMillis();
		solve();
		out.flush();
		if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
	}
	
	public static void main(String[] args) throws Exception { new Solution().run(); }
	
	private byte[] inbuf = new byte[1024];
	private int lenbuf = 0, ptrbuf = 0;
	
	private int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private double nd() { return Double.parseDouble(ns()); }
	private char nc() { return (char)skip(); }
	
	private String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}
